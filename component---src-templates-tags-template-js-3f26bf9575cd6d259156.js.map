{"version":3,"file":"component---src-templates-tags-template-js-3f26bf9575cd6d259156.js","mappings":"4KA2BA,IAtBiB,YAAgB,IACzBA,EADwB,EAAZC,MACKC,KAAI,YAAmD,IAAhDC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAClDC,EAAmCJ,EAAnCI,MAAOC,EAA4BL,EAA5BK,KAAMC,EAAsBN,EAAtBM,KAAMC,EAAgBP,EAAhBO,YACnBC,EAASP,EAATO,KAER,OACE,gBAACC,EAAD,CACEC,IAAKF,EACLH,KAAMA,EACND,MAAOA,EACPE,KAAMA,EACNE,KAAMA,EACNL,WAAYA,EACZI,YAAaA,EACbL,QAASA,GAGd,IAED,OAAO,gBAACS,EAAD,KAAiBd,EACzB,EAID,IAAMY,EAAe,SAAC,GAQf,IAPLL,EAOI,EAPJA,MACAE,EAMI,EANJA,KACAH,EAKI,EALJA,WACAE,EAII,EAJJA,KACAH,EAGI,EAHJA,QACAK,EAEI,EAFJA,YACAC,EACI,EADJA,KAEA,OACE,gBAACI,EAAD,KACE,gBAAC,IAAD,CAAMP,KAAMA,IAEZ,gBAACQ,EAAD,KACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIP,GAAOJ,IAEnB,gBAACY,EAAD,CACEC,wBAAyB,CACvBC,OAAQX,GAAeL,KAG3B,gBAACiB,EAAD,KACE,4BAAOb,GAEP,4BAAOH,EAAP,UAIP,EAEKQ,EAAiBS,EAAAA,QAAAA,GAAAA,WAAH,oEAAGA,CAAH,yMAedR,EAAqBQ,EAAAA,QAAAA,GAAAA,WAAH,wEAAGA,CAAH,4bA8BlBP,EAAgBO,EAAAA,QAAAA,GAAAA,WAAH,mEAAGA,CAAH,4OAuBbJ,EAAkBI,EAAAA,QAAAA,EAAAA,WAAH,qEAAGA,CAAH,gDAKfD,EAAeC,EAAAA,QAAAA,IAAAA,WAAH,kEAAGA,CAAH,0F,qCCjIZC,GAAaD,E,OAAAA,SAAON,EAAAA,MAAV,8EAAGM,CAAH,4OAahB,K,wDCUA,IAfa,SAAC,GAAc,IAAZf,EAAW,EAAXA,KACd,OACE,2BACGA,GACCA,EAAKN,KAAI,SAACuB,GACR,OACE,gBAACC,EAAD,CAAKb,IAAKY,GACR,gBAAC,EAAAR,KAAD,CAAMC,GAAE,UAdDS,EAcwBF,EAbpCE,EACJC,MAAM,sEACN1B,KAAI,SAAC2B,GAAD,OAAOA,EAAEC,aAAT,IACJC,KAAK,OAU4CN,IAdlC,IAACE,CAiBZ,IAGR,EAID,IAAMD,EAAMH,EAAAA,QAAAA,KAAAA,WAAH,qDAAGA,CAAH,ojB,6FCkBT,UAvCqB,SAAC,GAA2B,IAAzBS,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAC3BR,EAAQO,EAARP,IACAS,EAAeD,EAAKE,kBAApBD,WACFjC,EAAQgC,EAAKE,kBAAkBC,MAC/B7B,EAAK,gBAAmBkB,EAE9B,OACE,gBAAC,IAAD,CAAQlB,MAAOA,GACb,gBAAC8B,EAAD,KACE,gBAACC,EAAD,KACGJ,EADH,kBAC8BT,EAD9B,KAGA,mBAOEP,GAAG,SAPL,iBAWA,gBAAC,IAAD,CAAUjB,MAAOA,IAEjB,mBAKEiB,GAAG,SALL,kBAYP,EAID,IAAMmB,EAAsBd,EAAAA,QAAAA,IAAAA,WAAH,8EAAGA,CAAH,kCAInBe,EAAQf,EAAAA,QAAAA,GAAAA,WAAH,gEAAGA,CAAH,gCAIJ,yW","sources":["webpack://gatsby-starter-glass/./src/components/post-list.js","webpack://gatsby-starter-glass/./src/components/styled-link.js","webpack://gatsby-starter-glass/./src/components/tags.js","webpack://gatsby-starter-glass/./src/templates/tags-template.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport Tags from \"./tags\";\n\nconst PostList = ({ posts }) => {\n  const PostList = posts.map(({ frontmatter, fields, excerpt, timeToRead }) => {\n    const { title, tags, date, description } = frontmatter;\n    const { slug } = fields;\n\n    return (\n      <PostListItem\n        key={slug}\n        tags={tags}\n        title={title}\n        date={date}\n        slug={slug}\n        timeToRead={timeToRead}\n        description={description}\n        excerpt={excerpt}\n      />\n    );\n  });\n\n  return <StyledPostList>{PostList}</StyledPostList>;\n};\n\nexport default PostList;\n\nconst PostListItem = ({\n  title,\n  date,\n  timeToRead,\n  tags,\n  excerpt,\n  description,\n  slug,\n}) => {\n  return (\n    <StyledPostListItem>\n      <Tags tags={tags} />\n\n      <PostListTitle>\n        <Link to={slug}>{title}</Link>\n      </PostListTitle>\n      <PostListExcerpt\n        dangerouslySetInnerHTML={{\n          __html: description || excerpt,\n        }}\n      />\n      <PostListMeta>\n        <span>{date}</span>\n\n        <span>{timeToRead} mins</span>\n      </PostListMeta>\n    </StyledPostListItem>\n  );\n};\n\nconst StyledPostList = styled.ul`\n  padding: 0;\n  list-style: none;\n  display: grid;\n  justify-items: center;\n  grid-gap: var(--size-600);\n  grid-template-columns: repeat(auto-fit, minmax(35ch, 1fr));\n\n  @media screen and (max-width: 500px) {\n    & {\n      display: block;\n    }\n  }\n`;\n\nconst StyledPostListItem = styled.li`\n  display: flex;\n  padding: 1.5rem;\n  border-radius: 8px;\n  position: relative;\n  flex-direction: column;\n  transition: all 0.3s ease-out;\n\n  body.light-mode & {\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.5);\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n\n  body.light-mode &:hover {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n\n  body.dark-mode & {\n    background-color: #3b3b3c;\n    border: 1px solid #515151;\n  }\n\n  @media screen and (max-width: 500px) {\n    & {\n      margin-top: var(--size-600);\n    }\n  }\n`;\n\nconst PostListTitle = styled.h2`\n  line-height: 1.2;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  text-transform: capitalize;\n  font-size: var(--size-600);\n  font-weight: 700;\n\n  & a {\n    text-decoration: none;\n    color: inherit;\n  }\n\n  & a::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n`;\n\nconst PostListExcerpt = styled.p`\n  margin-top: auto;\n  font-size: var(--size-400);\n`;\n\nconst PostListMeta = styled.div`\n  margin-top: 2rem;\n\n  font-size: var(--size-300);\n  display: flex;\n  justify-content: space-between;\n`;\n","import { Link } from 'gatsby';\nimport styled from 'styled-components';\n\nconst StyledLink = styled(Link)`\n  padding: 0.5rem;\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n  color: inherit;\n  background-color: rgba(255, 255, 255, 0.4);\n  text-decoration: none;\n  border-radius: 0px;\n  border: 1px solid rgba(255, 255, 255, 0.8);\n  text-transform: uppercase;\n  border-radius: 4px;\n`;\n\nexport default StyledLink;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\n\nconst toKebabCase = (str) => {\n  return str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map((x) => x.toLowerCase())\n    .join(\"-\");\n};\n\nconst Tags = ({ tags }) => {\n  return (\n    <div>\n      {tags &&\n        tags.map((tag) => {\n          return (\n            <Tag key={tag}>\n              <Link to={`/tags/${toKebabCase(tag)}`}>{tag}</Link>\n            </Tag>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Tags;\n\nconst Tag = styled.span`\n  margin-right: 0.6rem;\n  margin-bottom: 0.6rem;\n  text-transform: uppercase;\n  font-size: var(--size-300);\n\n  & a {\n    position: relative;\n    z-index: 2;\n    text-decoration: none;\n    color: inherit;\n    padding: 0.2rem 0.6rem;\n    border: 1px solid rgba(255, 255, 255, 1);\n    border-radius: 4px;\n  }\n\n  & a:hover {\n    background-color: rgba(255, 255, 255, 0.9);\n  }\n\n  body.light-mode & a {\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.5);\n    background-color: rgba(255, 255, 255, 0.7);\n  }\n\n  body.light-mode & a:hover {\n    background-color: rgba(255, 255, 255, 1);\n  }\n\n  body.dark-mode & a {\n    background-color: #212122;\n    border: 1px solid #1a1a1b;\n    opacity: 0.8;\n  }\n`;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport PostList from '../components/post-list';\nimport StyledLink from '../components/styled-link';\nimport styled from 'styled-components';\n\nconst TagsTemplate = ({ pageContext, data }) => {\n  const { tag } = pageContext;\n  const { totalCount } = data.allMarkdownRemark;\n  const posts = data.allMarkdownRemark.nodes;\n  const title = `Posts tagged ${tag}`;\n\n  return (\n    <Layout title={title}>\n      <TagsTemplateWrapper>\n        <Title>\n          {totalCount} posts tagged \"{tag}\"\n        </Title>\n        <Link\n          css={`\n            margin-top: var(--size-400);\n            display: inline-block;\n            color: inherit;\n            text-transform: uppercase;\n          `}\n          to=\"/tags\"\n        >\n          view all tags\n        </Link>\n        <PostList posts={posts} />\n\n        <StyledLink\n          css={`\n            margin-top: var(--size-400);\n            display: inline-block;\n          `}\n          to=\"/tags\"\n        >\n          View All tags\n        </StyledLink>\n      </TagsTemplateWrapper>\n    </Layout>\n  );\n};\n\nexport default TagsTemplate;\n\nconst TagsTemplateWrapper = styled.div`\n  padding-top: var(--size-900);\n`;\n\nconst Title = styled.h1`\n  font-size: var(--size-700);\n`;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fields: { contentType: { eq: \"posts\" } }\n      }\n    ) {\n      totalCount\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          description\n          tags\n          title\n        }\n        timeToRead\n        excerpt\n      }\n    }\n  }\n`;\n"],"names":["PostList","posts","map","frontmatter","fields","excerpt","timeToRead","title","tags","date","description","slug","PostListItem","key","StyledPostList","StyledPostListItem","PostListTitle","Link","to","PostListExcerpt","dangerouslySetInnerHTML","__html","PostListMeta","styled","StyledLink","tag","Tag","str","match","x","toLowerCase","join","pageContext","data","totalCount","allMarkdownRemark","nodes","TagsTemplateWrapper","Title"],"sourceRoot":""}